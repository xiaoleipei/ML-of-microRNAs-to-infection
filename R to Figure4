#############################vlnplot to infect/uninfect the miRNA level in serum#######################

m1 <- read.table(file = "microRNA expression matrix.txt", header=T,sep="\t")
i=1
m2=as.matrix(m1[,6:101])
for(i in 1:432){
  m1[i,104]=mean(m2[i,1:96],0.3)
  
};

m3=m1;
####for balf
m3[1:56,6:101]=2^(m1[1:56,104]-m1[1:56,6:101]+10);
m3=m3[1:56,];
###for serum
m3[57:432,6:101]=2^(m1[57:432,104]-m1[57:432,6:101]+10);
m3=m3[57:432,];


i=6;
for(i in 6:101){
  m4=cbind(m3[,4],m3[,i]);
  m4=as.data.frame(m4);
  m4[,2]=as.numeric(m4[,2])
  t=unique(m4[,1]);
  j=1
  for(j in 1:376){
    if(m4[j,1]=="infect"){
      m4[j,3]=2;
    };
    if(m4[j,1]=="uninfect"){
      m4[j,3]=1;
    };
    if(m4[j,1]=="infect-early stage"){
      m4[j,3]=3;
    };
    if(m4[j,1]=="infect-middle stage"){
      m4[j,3]=4;
    };
    if(m4[j,1]=="infect-late stage"){
      m4[j,3]=5;
    };
    if(m4[j,1]=="unknown"){
      m4[j,3]=6;
    };
    
  }
  names(m4)=c("subgroup","el","order")
  m4=m4[order(m4[,3]),]
  m4=m4[-c(368,369,370,371,372,373,374,375,376),]
  ##exclude the extreme value
  QL<- quantile(m4[,2], probs = 0.25)
  QU <- quantile(m4[,2], probs = 0.75)
  QU_QL <- QU-QL;
  m4=m4[(which(m4[,2] < QU + 4*QU_QL)),];
  
  m4$subgroup <- factor(m4$subgroup, levels=c("uninfect", "infect","infect-early stage","infect-middle stage","infect-late stage"), ordered=TRUE)
  #"infect-early stage","infect-middle stage","infect-late stage"
  p=ggplot(m4, aes(x=subgroup, y=el,fill=subgroup)) +
     geom_violin(trim=FALSE)+
     theme_bw()+
     geom_jitter(alpha=1)+
     labs(title=colnames(m3)[i], x="group",y = "expression")+
     theme(axis.text.y=element_blank(),
             axis.ticks.y=element_blank()) 
     #scale_y_continuous(limits=c(-5, 50));
  ggsave(file=paste(colnames(m3)[i], "_serum.pdf",sep=""), p, width=6 ,height=5);

}

#########Figure4F (ctreeï¼‰##############################################################
set.seed(123);

sera <- read.table(file = "4stage.txt", header=T,sep="\t")

sera1=sera[,4:99];

i=1
for(i in 1:345){
  if(sera[i,3]=="infect-early stage"){
    sera1[i,97]=1
  };
  if(sera[i,3]=="infect-middle stage"){
    sera1[i,97]=2
  };
  if(sera[i,3]=="infect-late stage"){
    sera1[i,97]=3
  };
  if(sera[i,3]=="uninfect"){
    sera1[i,97]=0
  };
}
names(sera1)[97]="stage";

sera1[,97]=as.factor(sera1[,97]);

ind=sample(2,nrow(sera1),replace=TRUE, prob=c(0.67,0.33))  

trainset<-sera1[ind==1,]
testset<-sera1[ind==2,]

library(party)
ctree.model<-ctree(stage~.,data = trainset);
ctree.model
plot(ctree.model);

############################random forest#############################################################

sera.rf <- randomForest(dig~.,data=sera[,3:99], importance=TRUE, proximity=TRUE)

p=varImpPlot(sera.rf); 

sera2.rf <- randomForest(dig~hsa.miR.769.5p+
                           hsa.miR.451+
                           hsa.miR.331.3p+
                           hsa.miR.210.5p+
                           hsa.miR.155.5p+
                           hsa.miR.124.5p+
                           hsa.miR.370.5p+
                           hsa.miR.23a.5p+
                           hsa.miR.31.5p+
                           hsa.miR.4496+
                           hsa.let.7b.5p,data=sera[,3:99], importance=TRUE, proximity=TRUE)

varImpPlot(sera2.rf); 

sera2.rf <- randomForest(dig~hsa.miR.769.5p+
                           hsa.miR.451+
                           hsa.miR.331.3p+
                           hsa.miR.210.5p,data=sera[,3:99], importance=TRUE, proximity=TRUE)

## Do PCoA/MDS on 1 - proximity:
sera2.mds= cmdscale(1 - sera2.rf$proximity, eig=TRUE)
#set location
op= par(pty="s")
# each Feature and PCoA1/2 plot distribution

sera2=as.data.frame(cbind(sera$dig,
                          sera$hsa.miR.769.5p,
                          sera$hsa.miR.451,
                          sera$hsa.miR.331.3p,
                          sera$hsa.miR.210.5p))
names(sera2)=c("group",
               "hsa.miR.769.5p",
               "hsa.miR.451",
               "hsa.miR.331.3p",
               "hsa.miR.210.5p")

for(i in 1:231){
  if(sera2$group[i]==0){
    sera2$group[i]=2
  };
}

pairs(cbind(sera2[,2:5], sera2.mds$points), cex=0.6, gap=0,
      col=c("red","green")[as.numeric(sera2$group)],#, "blue"
      main="sera Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(balf.mds$GOF)

summary(balf.mds)

# verify the prediction model
sera.pred = as.data.frame(predict(sera.rf, sera[,3:98]));
# outcoume and predictiom
t=cbind(sera[,99],sera.pred); 
names(t)=c("group","predict");

## ROC curve
p=ggplot(data=NULL, mapping = aes(d = t$group, m = t$predict)) + 
  geom_roc(n.cuts = 1) + 
  style_roc()+
  ggsci::scale_color_lancet();
auc<-calc_auc(p);

write.table(t,file="0629_sera_randomforest_predict.txt",sep="\t",row.names=F);

# trainset:testset=7:3
ind=sample(2,nrow(sera),replace=TRUE, prob=c(0.67,0.33))  
# model
sera2.rf = randomForest(dig~hsa.miR.769.5p+
                          hsa.miR.451+
                          hsa.miR.331.3p+
                          hsa.miR.210.5p, sera[ind==1,3:99], ntree=1000, 
                       nPerm=10, mtry=3, proximity=TRUE, importance=TRUE)  
print(sera.rf)  
# 1/3test
sera.pred = predict(sera2.rf, sera[ind==2,3:98] )  
#test matrix
t=as.data.frame(cbind(sera[ind==2,99],sera.pred));
names(t)=c("dig","predict");

## ROC curve
p=ggplot(data=NULL, mapping = aes(d = t$dig, m = t$predict)) + 
  geom_roc(n.cuts = 1) + 
  style_roc()+
  ggsci::scale_color_lancet();
auc<-calc_auc(p);

ggsave(p,filename = "0702balf_rf_sera.pdf",height = 4,width = 5)

write.table(t,file="0629_sera_randomforest_predict.txt",sep="\t",row.names=F);


sera.pred = as.data.frame(predict(sera.rf, sera[,3:98]));
names(sera.pred)="predict";

library(pROC);
roc<-multiclass.roc(as.ordered(sera$dig) ,as.ordered(sera.pred$predict))
roc
roc<-roc(as.ordered(sera$dig) ,as.ordered(sera.pred$predict));
plot(roc,print.auc=T, auc.polygon=T, grid=c(0.1, 0.2), grid.col=c("green","red"), 
    max.auc.polygon=T, auc.polygon.col="skyblue",print.thres=T);

sera_c=na.omit(sera)
# set cv
result=rfcv(sera[,3:98],sera$dig,cv.fold = 5)
# error plot
with(result,plot(n.var,error.cv,log="x",type="o",lwd=2))


##replicate CV
result=replicate(5,rfcv(sera[,3:98],sera$dig),simplify = FALSE)
error.cv=sapply(result,"[[","error.cv")
matplot(result[[1]]$n.var,cbind(rowMeans(error.cv),error.cv),type = "l",lwd = c(2,rep(1,ncol(error.cv))),col = 1,lty = 1,log="x",xlab = "Number of variables",ylab="CV Error")

varImpPlot(sera.rf)

for(i in 1:231){
  if(sera$dig[i]==0){
    sera$dig[i]=2
  };
}

sera20.rf = randomForest(dig~hsa.miR.769.5p+
                          hsa.miR.451+
                          hsa.miR.331.3p+
                          hsa.miR.210.5p+
                          hsa.miR.155.5p+
                          hsa.miR.124.5p+
                          hsa.miR.370.5p+
                          hsa.miR.183.5p+
                          hsa.miR.23a.5p+
                          hsa.miR.31.5p+
                          hsa.miR.4496+
                          hsa.let.7b.5p+
                          hsa.miR.16.1.3p+
                          hsa.miR.128.1.5p+
                          hsa.miR.33a.5p+
                          hsa.miR.32.5p+
                          hsa.miR.203a.5p+
                          hsa.miR.26b.5p+
                          hsa.miR.96.5p+
                          hsa.miR.329.5p+
                          hsa.miR.582.5p, sera[,3:99], ntree=1000,nPerm=10, mtry=3, proximity=TRUE, importance=TRUE)  
MDSplot(sera20.rf,sera$dig)





