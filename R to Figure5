#######################SVM algorithm################################################################
logi_vdata=svmvdata
logi_vdata[,97]=as.numeric(logi_vdata[,97]);
for(i in 1:231){
  if(vdata[i,97]==2){
    logi_vdata[i,97]="0";
  }
}
logi_vdata[,97]=as.factor(logi_vdata[,97]);

dig=as.factor(logi_vdata[,97]);
logi_sera <- glm(dig~hsa.miR.769.5p+
                   hsa.miR.451+
                   hsa.miR.331.3p+
                   hsa.miR.210.5p+
                   hsa.miR.155.5p+
                   hsa.miR.124.5p+
                   hsa.miR.370.5p+
                   hsa.miR.183.5p+
                   hsa.miR.23a.5p+
                   hsa.miR.31.5p+
                   hsa.miR.4496+
                   hsa.let.7b.5p+
                   hsa.miR.16.1.3p+
                   hsa.miR.128.1.5p+
                   hsa.miR.33a.5p+
                   hsa.miR.32.5p+
                   hsa.miR.203a.5p+
                   hsa.miR.26b.5p+
                   hsa.miR.96.5p+
                   hsa.miR.329.5p+
                   hsa.miR.582.5p, data=logi_vdata[,-97],family = binomial(link = 'logit'));

prob<-predict(object =logi_sera,newdata=logi_vdata[,-97],type = "response")

pred<-ifelse(prob>=0.5,"1","0")
pred<-factor(pred,levels = c("0","1"),order=TRUE)
logi.perf<-table(logi_vdata[,97],pred)
logi.perf

logi_accuracy_2 <- sum(diag(logi.perf))/sum(logi.perf)
logi_accuracy_2


write.table(sera,file="sera_infect_uninfect_rawdata.txt",sep="\t",row.names=F);

svmdata <- read.table(file = "sera_infect_uninfect_sera1.txt", header=T,sep="\t")

ind=sample(2,nrow(svmdata),replace=TRUE, prob=c(0.8,0.2))  

svm_model_2 <- svm(x=svmdata[ind==1,-c(1,2,3,4)],y=svmdata[ind==1,3],type = 'nu-classification', kernel = 'radial',gamma = 0.01,cost=10)
svm_pred_2 <- predict(object = svm_model_2, newdata = svmdata[ind==2,-c(1,2,3,4)])
svm_Freq_2 <- table(svmdata[ind==2,3], svm_pred_2)
svm_Freq_2

svm_accuracy_2 <- sum(diag(svm_Freq_2))/sum(svm_Freq_2)
svm_accuracy_2

svm_model_2 <- svm(x=vdata[,-97],y=vdata[,97],type = 'nu-classification', kernel = 'radial',gamma = 0.01,cost=10,cross=1)
svm_pred_2 <- predict(object = svm_model_k, newdata = vdata[,-97],type="probabilities")
svm_Freq_2 <- table(vdata[,97], svm_pred_2)
svm_Freq_2

svm.perf<- table(vdata$dig,
                 svm_pred_2, dnn=c("Actual", "Predicted"))
svm.perf

svm_accuracy_2 <- sum(diag(svm_Freq_2))/sum(svm_Freq_2)
svm_accuracy_2

write.table(t10,file="sera_infect_uninfect_error.txt",sep="\t",row.names=F);

## ROC curve
p=ggplot(data=NULL, mapping = aes(d = svm_pred_2[,1], m = svm_pred_2[,2])) + 
  geom_roc(n.cuts = 1) + 
  style_roc()+
  ggsci::scale_color_lancet();
auc<-calc_auc(p);

ggsave(p,filename = "0702sera_rf_sera.pdf",height = 4,width = 5)

#training set and testing set
ind=sample(2,nrow(svmdata),replace=TRUE, prob=c(0.67,0.33))  
# prediction
dig<-as.factor(svmdata[ind==1,3]);
sera2.rf = randomForest(dig~hsa.miR.769.5p+
                          hsa.miR.451+
                          hsa.miR.331.3p+
                          hsa.miR.210.5p+
                          hsa.miR.155.5p+
                          hsa.miR.124.5p+
                          hsa.miR.370.5p+
                          hsa.miR.183.5p+
                          hsa.miR.23a.5p+
                          hsa.miR.31.5p+
                          hsa.miR.4496+
                          hsa.let.7b.5p+
                          hsa.miR.16.1.3p+
                          hsa.miR.128.1.5p+
                          hsa.miR.33a.5p+
                          hsa.miR.32.5p+
                          hsa.miR.203a.5p+
                          hsa.miR.26b.5p+
                          hsa.miR.96.5p+
                          hsa.miR.329.5p+
                          hsa.miR.582.5p, svmdata[ind==1,-c(1,2,3,4)], ntree=1000, 
                        nPerm=10, mtry=3, proximity=FALSE, importance=TRUE)  
print(sera.rf)  

sera.pred = predict(sera2.rf, svmdata[ind==2,-c(1,2,3,4)] )  

t10=cbind(svmdata[ind==2,c(1,2,3,4)],sera.pred)


rf.perf<- table(svmdata[ind==2,]$dig,
                sera.pred, dnn=c("Actual", "Predicted"))
rf.perf
